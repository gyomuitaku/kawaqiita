
<body>
  <p id="text"></p>
  <p id="target">click to start</p>
  <p id="botan">
  </p>
    <%# <p><input id="next" type="button" value="next"class="botan"></p> %>
  <p class="info">
    正解問題数: <span id="score">0</span>,
    残り問題数: <span id="total">10</span>,

    問題数: <span id="time">10</span>
    <table class="table" id="tab"></table>
    <table class="table" id="answer"></table>
    <table id="miss"></table>
  </p>

  
  </body>
<script>
{
  // const words = gon.questions;
  const words = gon.questions;
  let word;
  let cnt;
  let loc;
  let score;
  let miss;
  let plusword;
  let apple;
  let isPlaying = false;
  let total_count;
  let list;
  const target = document.getElementById('target');
  const text = document.getElementById('text');

  const scoreLabel = document.getElementById('score');
  const missLabel = document.getElementById('miss');
  // const timerLabel = document.getElementById('timer');

  const total = document.getElementById("total")

  const table = document.getElementById('tab');
  const answer = document.getElementById('answer');

  // 要素を取得
//   let top = document.getElementById('top');
// // 現在の display プロパティの値を保持
//   const displayOriginal = top.style.display;
// // none に設定して非表示
//   top.style.display = 'none';
// 元に戻して表示
  


  function updateTarget() {
    let placeholder = '';
    for (let i = cnt; i > 0; i--) {
      placeholder += '_';
    }
    text.textContent = word.answer
    target.textContent = plusword + placeholder ;
  }

  function for_base(para,wordss) {
    let loc=[];
    if (wordss ===0){
    for(let i=1;i<para.length;i++){
      loc +=para[i].text
    }}
    if (wordss ===1){
    for(let i=1;i<para.length;i++){
      loc +=para[i].answer
    }}
    return loc
  }
  function updateTimer() {

    if (total_count <= 0) {
      isPlaying = true;

      target.textContent = 'click to replay';
      total.textContent = total_count;
      text.textContent ="";
      // let resul =[];
      // let love =[];
      // let re =[];
      // let lo =[];
      // for(let i=1;i < apple.length;i++){
      //   resul += apple[i].text 
      //   love += apple[i].answer
      // }
      removebotan()
      gameEnd()
      table.textContent =for_base(apple,0)
      answer.textContent =for_base(apple,1)
      missLabel.textContent =for_base(list,0)
    }
  }
  function createbotan(params,parama) {
    const bota ="bottan";
    let botans;
    botans =bota +`${params}`
    botans =document.getElementById("botan");
    if (botans.hasChildNodes()){
      const input = document.createElement("input");
      input.setAttribute("type","button"); 
		  input.setAttribute("size","50"); 
      input.setAttribute("id",parama)
		  input.setAttribute("value",parama);
      botans.appendChild(input);
    }
    
  }
  function removebotan() {
    const botan = document.getElementById("botan");
	  if (botan.hasChildNodes()){
		while (botan.firstChild) {
      botan.removeChild(botan.firstChild);
    }
    
  }}

  function showResult() {
    const accuracy = score  === 0 ? 0 : score / (score ) * 100;
    alert("${score} letters, ${miss} misses, ${accuracy.toFixed(2)}% accuracy!");
  }
  function plus(lists,word) {
    lists.push(word)
  }


  function gameEnd() {
    let appai =[]
    let miss =[]
    for (let i=1;i<apple.length;i++){
       appai =apple[i]
      $.ajax({
        url: '/type/results',
        type: 'POST',
        data: {
          results: appai
        }
      })
    }
    for (let i=1;i<list.length;i++){
       miss =list[i]
      $.ajax({
        url: '/type/results',
        type: 'POST',
        data: {
          miss: miss
        }
      })
    }

  }

  
  


  window.addEventListener('click', () => {
    if (isPlaying === true) {
      return;
    }
    isPlaying = true;
    createbotan("1","next")
    createbotan("2","reset")
    loc = 0;
    score = 0;
    miss = 0;
    cnt =0;
    total_count =10;
    plusword ="";
    apple =[""]
    list =[""]
    scoreLabel.textContent = score;
    word = words[Math.floor(Math.random() * words.length)];
    total.textContent = total_count;
    cnt =word.text.length;
    updateTarget()
    if (isPlaying!==false){
    if (!next.hasChildNodes()){
          next.addEventListener("click", function (e) {
            word = words[Math.floor(Math.random() * words.length)];
            plusword =""
            total_count --;
            total.textContent = total_count;
            cnt =word.text.length;
            // plus(apple,word);
            plus(list,word)
            updateTarget();
            updateTimer();
        })
     }
    }
    if (!reset.hasChildNodes()){
      reset.addEventListener("click", function (e) {
    // timerLabel.textContent = "";
        text.textContent ="";
        target.textContent=""
        alert("処理が終了されますがよろしいですか");
        window.location.reload();
      })
    }
  });

  window.addEventListener('keydown', e => {
    if (isPlaying !== true) {
      return;
    }
    if (e.key === word.text[loc]) {
      loc++;
      cnt --;
      plusword +=word.text[loc-1]
      if (loc === word.text.length) {
        target.textContent =word;
        // sleep(200);
        word = words[Math.floor(Math.random() * words.length)];
        total_count --;
        total.textContent = total_count;
        apple.push(word);

        loc = 0;
        cnt = word.text.length;
        plusword ="";
        score++;
        scoreLabel.textContent = score;
      }
      updateTarget();
      updateTimer()
    }
  });
  
}
// </script>
<style>
body {
  padding-top: 40px;
  font-family: 'Courier New', monospace;
  text-align: center;
}

#target {
  font-size: 48px;
  letter-spacing: 3px;
}
</style>
