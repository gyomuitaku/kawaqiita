<div class="js-parallax u-promo-block top-bg-img">
    <div class="container-fluid bg-wite-o">
        <div class=" ">
            <div id="sceneTop" class="top screen">
                <div class="my-5">
                    <h1>
                        <% if @test %>
                            進級テスト
                            <% elsif params[:select_num].to_i != 0 %>
                            <%= params[:select_num].to_i - 2 %>
                            ~
                            <%= params[:select_num].to_i +  400 * params[:quiz_type].to_i + 98 %>
                        <% else %>
                            0 ~ 100
                        <% end %>
                    </h1>
                </div>
                <div class="row">
                    <div class="col-sm-4">
                        <div class="wrapper_quiz">
                            <a id="btnStart-10" class="button_quiz">10問</a>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="wrapper_quiz">
                            <a id="btnStart-30" class="button_quiz">30問</a>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="wrapper_quiz">
                            <a id="btnStart-100" class="button_quiz">100問</a>
                        </div>
                    </div>
                    <div class="col-sm-4 offset-sm-4" id="testbtn">
                        <div class="wrapper_quiz">
                            <a id="btnStart-50" class="button_quiz">テスト開始</a>
                        </div>
                    </div>

                </div>
            </div>

            <div id="sceneGame" class="game screen container">
                <p id="current_quiz_No" class="border-bottom text-left">No. 1</p>
                <p id="textQuestion"></p>
                <ul id="listAnswer"></ul>
                <div id="btn" class="disabled">Next</div>
            </div>

            <section id="result" class="hidden">
                <p class="btn" id="resultText"></p>
                <p id="resultScore"></p>
                <button id="btnResult" class="btn btn-outline-dark mt-6" role="button">結果を見る</button>
            </section>

            <div
                id="sceneResult" class="result screen"><%# <button id="btnResult" class="btn btn-outline-dark mt-6" role="button">結果を見る</button> %>
            </div>
            <div class="container-fluid">
                <section
                    id="indexResult" class="text-center">
                    <%#　間違えた問題をもう一度行えればなお良い！ %>
                    <div class="row h-auto mb-2">
                        <a id="retry-quiz" class="btn btn-outline-dark text-right">
                            間違えた問題だけ再テスト
                        </a>
                        <a href="#" class="btn btn-outline-dark">別の問題</a>
                    </div>
                    <table border="1" id="targetTable" class="table tbl-r05">
                        <tr class="thead">
                            <td>問題No</td>
                            <td>出題Word</td>
                            <td>あなたの解答</td>
                            <td>正解の解答</td>
                            <td>〇/✕</td>
                        </tr>
                    </table>
                    <div class="text-right">
                        <a class="btn btn-outline-dark text-right" href="/select">
                            問題選択に戻る
                        </a>
                    </div>
                </section>
            </div>
        </div>
    </div>
</div>
<style>
    body {
        background: #ffffff;
        font-size: 14px;
        font-family: Verdana, sans-serif;
    }
</style>
<script>
    (function () {
            let table = document.getElementById("targetTable");
            const sceneTop = document.getElementById("sceneTop");
            const sceneGame = document.getElementById("sceneGame");
            const sceneResult = document.getElementById("sceneResult");
            const textQuestion = document.getElementById("textQuestion");
            const listAnswer = document.getElementById("listAnswer");
            const numResult = document.getElementById("numResult");
            const btnStart10 = document.getElementById("btnStart-10");
            const btnStart30 = document.getElementById("btnStart-30");
            const btnStart100 = document.getElementById("btnStart-100");
            const btnResult = document.getElementById("btnResult");
            const indexResult = document.getElementById("indexResult");
            const resultText = document.getElementById("resultText");
            const testBtn = document.getElementById("testbtn");
            const retryQuiz = document.getElementById("retry-quiz");
            const btn = document.getElementById('btn');
            const current_quiz_No = document.getElementById('current_quiz_No');
            const result = document.getElementById('result');
            const scoreLabel = document.getElementById('resultScore');
            let isAnswered;
            let isSetting = 0

            // use gon
            let question = gon.questions;

            let state = {
                answer: "",
                gameCount: 0,
                totalCount: 0,
                success: 0,
                correctInArray: []
            };

            let quizResult = function (en_word, user_answer, answer) {
                this.en_word = en_word;
                this.user_answer = user_answer;
                this.answer = answer;
                this.status = 0;
                this.user_id = gon.test ? gon.test[2] : 1;
            }

            let failedQuiz = function (text, choice, answer) {
                this.text = text;
                this.choice = choice;
                this.answer = answer;
            }
            let retryArray = [];
            let quizResults = [];

            // -------------------------------------------------
            function init() {
                state.gameCount = 0;
                state.success = 0;
                state.totalCount = 0;
                state.correctInArray = [];
                btn.textContent = 'Next'
                changeScene(sceneResult, sceneTop);
                result.classList.add('hidden');
                table.classList.add('hidden');
                indexResult.classList.add('hidden');

                if (gon.test) {
                    btnStart10.classList.add('hidden');
                    btnStart30.classList.add('hidden');
                    btnStart100.classList.add('hidden');
                    testbtn.classList.remove('hidden');
                    testBtn.addEventListener("click", {
                        count: 5,
                        handleEvent: gameStart
                    }, false);

                } else {
                    testBtn.classList.add('hidden');
                    btnStart10.addEventListener("click", {
                        count: 10,
                        handleEvent: gameStart
                    }, false);
                    btnStart30.addEventListener("click", {
                        count: 30,
                        handleEvent: gameStart
                    }, false);
                    btnStart100.addEventListener("click", {
                        count: 100,
                        handleEvent: gameStart
                    }, false);
                }
                // 非同期なので引数は特殊
            }

            function changeScene(hiddenScene, visibleScene) {
                hiddenScene.classList.add("is-hidden");
                hiddenScene.classList.remove("is-visible");
                visibleScene.classList.add("is-visible");
            }

            function showQuestion() {
                let str = "";
                question[state.gameCount].choice.forEach(function (value) {
                    str += '<li class="questionChoice">' + value + "</li>";
                });
                textQuestion.innerHTML = question[state.gameCount].text;
                listAnswer.innerHTML = str;
                current_quiz_No.innerHTML = "No. " + (
                    state.gameCount + 1
                );
            }

            function choiceQuestion() {
                let questionChoice = document.querySelectorAll(".questionChoice");
                questionChoice.forEach(function (choice) {
                    choice.addEventListener("click", function () {
                        if (isAnswered) {
                            return;
                        }
                        isAnswered = true;
                        state.answer = this.textContent;
                        checkAnswer(question[state.gameCount], choice);
                    }, false);
                });
            }

            function checkAnswer(question, choice) {

                let quiz = new quizResult(question.text, state.answer, question.answer);
                if (question.answer === state.answer) {
                    correctAnswer(choice);
                    quiz.status = 1;
                } else {
                    incorrectAnswer(choice, question.answer);
                    // generate retryquiz
                    let failedquiz = new failedQuiz(question.text, question.choice, question.answer);
                    retryArray.push(failedquiz);

                    quiz.status = 0;
                } state.gameCount ++;
                quizResults.push(quiz)
                if (state.gameCount<state.totalCount) {
        btn.classList.remove('disabled');
      } else {
        btn.textContent = 'Show Score';
        btn.classList.remove('disabled');

      }
    }

    btn.addEventListener('click', () => {
                    if (btn.classList.contains('disabled')) {
                        return;
                    }
                    isAnswered = false;
                    btn.classList.add('disabled');
                    if (state.gameCount >= state.totalCount) {
                        gameEnd()
                    } else {
                        showQuestion();
                        choiceQuestion();
                    }
                }) 


                    function correctAnswer(choice) {
                        state.success ++;
                        choice.classList.add('correct');
                    }
                


                function incorrectAnswer(choice, answer) {
                    state.correctInArray = document.getElementsByClassName("questionChoice");
                    for (let i = 0; i < state.correctInArray.length; i++) {
                        if (state.correctInArray[i].textContent === answer) {
                            state.correctInArray[i].classList.add('correct');
                            break
                        }
                    }
                    choice.classList.add('wrong');
                }

                function gameStart(e) {
                    state.totalCount = this.count;
                    changeScene(sceneTop, sceneGame);
                    showQuestion();
                    choiceQuestion();
                }


                function gameEnd() {
                    if (gon.test) {
                        resultText.textContent = (state.success >= 4) ? "合格！" : "不合格";
                        (state.success >= 4) ? resultText.classList.add("btn-outline-success") : resultText.classList.add("btn-outline-warning");
                        if (gon.test[0]["user_id"] && state.success >= 4) {
                            $.ajax({
                                // 実行したいactionへのpathに置き換えてください。
                                // 例えば users_controller の create アクションなどの場合は
                                // /users/create などとなると思います。
                                url: '/user',
                                // GET, POST, PUT, DELETEなどを設定します。
                                type: 'POST',
                                // urlにつけるパラメータを指定します。
                                data: {
                                    // JSの変数の中のデータをRailsに渡します。
                                    // Rails からは parmas[:hoge] で受け取れます。
                                    datas: gon.test
                                }
                            })
                        }
                    }
                    let insertText = `Score: ${
                        state.success
                    } / ${
                        state.totalCount
                    }`;
                    scoreLabel.textContent = insertText
                    result.classList.remove('hidden');
                    btnResult.classList.remove('hidden')
                    changeScene(sceneGame, sceneResult);
                    if (isSetting === 0) {
                        btnResult.addEventListener("click", {
                            viewQuizResults: quizResults,
                            handleEvent: showResult
                        }, false);
                        isSetting = 1
                    }
                }


                function showResult(e) {
                    let str = "";
                    for (let i = 0; i < quizResults.length; i++) {
                        for (let key in quizResults[i]) {
                            str += quizResults[i][key] + ",";
                        }
                    };
                    result.classList.add('hidden');
                    btnResult.classList.add('hidden');
                    table.classList.remove('hidden');
                    indexResult.classList.remove('hidden');
                    quiz_element = str.split(",")
                    var label = ['出題Word', 'あなたの回答', '正解', '正誤']
                    for (let i = 0; i < (quiz_element.length - 1) / 5; i++) {
                        let newRow = table.insertRow();
                        for (let j = 0; j < 5; j++) {
                            if (j === 0) {
                                input_text = i + 1;
                                let newCell = newRow.insertCell();
                                newCell.getAttribute('data-label')
                                newCell.dataset.label = '問題No'
                                let newText = document.createTextNode(input_text);
                                newCell.appendChild(newText);
                            } else if (j == 4) {
                                break;
                            }
                            input_text = quiz_element[i * 5 + j]
                            if (j == 3) {
                                if (input_text == 1) {
                                    input_text = '〇'
                                } else {
                                    input_text = '✕'
                                }
                            }
                            let newCell = newRow.insertCell();
                            newCell.getAttribute('data-label')
                            newCell.dataset.label = label[j]
                            let newText = document.createTextNode(input_text);
                            newCell.appendChild(newText);
                        };
                    };
                    // 間違えた問題をやり直す
                    retryQuiz.classList.remove("hidden");
                    if ((quiz_element.length - 1) / 5 === state.success) {
                        retryQuiz.classList.add("hidden");
                    } else if (isSetting === 1) {
                        retryQuiz.addEventListener("click", {
                            retryQuizs: retryArray,
                            handleEvent: retryQuizFunc
                        }, false);
                        isSetting = 2;
                    }


                    function retryQuizFunc(e) {
                        for (let i = 0; i < state.totalCount; i++) {
                            table.deleteRow(state.totalCount - i);
                        };

                        init()
                        state.totalCount = retryArray.length;
                        question = retryArray

                        retryArray = [];
                        quizResults = [];
                        changeScene(sceneTop, sceneGame);
                        showQuestion();
                        choiceQuestion();
                    }
                };

                init();
            }
        )();
        </script>
